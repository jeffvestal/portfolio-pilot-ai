import random
from datetime import datetime, timedelta
import uuid
import json
import time
import os
import sys  # To exit cleanly if essential env vars are missing

# Third-party libraries
from elasticsearch import Elasticsearch, helpers
import google.generativeai as genai
from tqdm import tqdm

import warnings
from urllib3.exceptions import InsecureRequestWarning

# Suppress the specific InsecureRequestWarning
warnings.filterwarnings('ignore', category=InsecureRequestWarning)

# --- Configuration for Generation ---
# Paths to your prompt files
PROMPT_FILES = {
    "general_news": "general_market_news.txt",
    "specific_news": "specific_news.txt",
    "specific_report": "specific_report.txt",
    "thematic_report": "thematic_sector_report.txt",
}

# Number of articles/reports to generate
NUM_SPECIFIC_NEWS_PER_ASSET = 1
NUM_GENERAL_NEWS_ARTICLES = 500

NUM_SPECIFIC_REPORTS_PER_ASSET = 1
NUM_THEMATIC_REPORTS = 100

# --- File Paths for Generated Data ---
GENERATED_NEWS_FILE = "generated_news.jsonl"
GENERATED_REPORTS_FILE = "generated_reports.jsonl"

# --- API Keys and Endpoints (Loaded from Environment Variables) ---
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
# ES_ENDPOINT_URL = os.getenv("ES_ENDPOINT_URL")
# ES_API_KEY = os.getenv("ES_API_KEY")

ES_ENDPOINT_URL = os.getenv("ES_ENDPOINT_URL", "https://localhost:9200")
ES_API_KEY = os.getenv("ES_API_KEY", "VjJDYTVaY0JxOVM3M2tfUkxrV2w6azExUG1SZXZ4WTkxd25hY1JaUExCZw==")


BULK_BATCH_SIZE = 100
REQUEST_TIMEOUT = 60
GEMINI_REQUEST_DELAY_SECONDS = 0.5  # Delay between Gemini API calls to avoid rate limits

# --- Elasticsearch Index Names ---
NEWS_INDEX = "financial_news"
REPORTS_INDEX = "financial_reports"

# --- Lookup Data (Same as your previous script) ---
STOCK_SYMBOLS_AND_INFO = {
    'AAPL': {'name': 'Apple Inc.', 'sector': 'Technology', 'indices': ['NASDAQ 100', 'S&P 500']},
    'MSFT': {'name': 'Microsoft Corp.', 'sector': 'Technology', 'indices': ['NASDAQ 100', 'S&P 500']},
    'GOOGL': {'name': 'Alphabet Inc. (Class A)', 'sector': 'Communication Services',
              'indices': ['NASDAQ 100', 'S&P 500']},
    'AMZN': {'name': 'Amazon.com Inc.', 'sector': 'Consumer Discretionary', 'indices': ['NASDAQ 100', 'S&P 500']},
    'NVDA': {'name': 'NVIDIA Corp.', 'sector': 'Technology', 'indices': ['NASDAQ 100', 'S&P 500']},
    'META': {'name': 'Meta Platforms Inc.', 'sector': 'Communication Services', 'indices': ['NASDAQ 100', 'S&P 500']},
    'TSLA': {'name': 'Tesla Inc.', 'sector': 'Consumer Discretionary', 'indices': ['NASDAQ 100', 'S&P 500']},
    'AVGO': {'name': 'Broadcom Inc.', 'sector': 'Information Technology', 'indices': ['NASDAQ 100', 'S&P 500']},
    'ADBE': {'name': 'Adobe Inc.', 'sector': 'Technology', 'indices': ['NASDAQ 100', 'S&P 500']},
    'CSCO': {'name': 'Cisco Systems Inc.', 'sector': 'Technology', 'indices': ['NASDAQ 100', 'S&P 500']},
    'CMCSA': {'name': 'Comcast Corp.', 'sector': 'Communication Services', 'indices': ['NASDAQ 100', 'S&P 500']},
    'INTC': {'name': 'Intel Corp.', 'sector': 'Technology', 'indices': ['NASDAQ 100', 'S&P 500']},
    'PEP': {'name': 'PepsiCo Inc.', 'sector': 'Consumer Staples', 'indices': ['NASDAQ 100', 'S&P 500']},
    'COST': {'name': 'Costco Wholesale Corp.', 'sector': 'Consumer Staples', 'indices': ['NASDAQ 100', 'S&P 500']},
    'TMUS': {'name': 'T-Mobile US Inc.', 'sector': 'Communication Services', 'indices': ['NASDAQ 100', 'S&P 500']},
    'SBUX': {'name': 'Starbucks Corp.', 'sector': 'Consumer Discretionary', 'indices': ['NASDAQ 100', 'S&P 500']},
    'AMGN': {'name': 'Amgen Inc.', 'sector': 'Healthcare', 'indices': ['NASDAQ 100', 'S&P 500']},
    'ISRG': {'name': 'Intuitive Surgical Inc.', 'sector': 'Healthcare', 'indices': ['NASDAQ 100', 'S&P 500']},
    'MDLZ': {'name': 'Mondelez International Inc.', 'sector': 'Consumer Staples', 'indices': ['NASDAQ 100', 'S&P 500']},
    'PYPL': {'name': 'PayPal Holdings Inc.', 'sector': 'Financials', 'indices': ['NASDAQ 100', 'S&P 500']},
    'QCOM': {'name': 'Qualcomm Inc.', 'sector': 'Technology', 'indices': ['NASDAQ 100', 'S&P 500']},
    'TXN': {'name': 'Texas Instruments Inc.', 'sector': 'Technology', 'indices': ['NASDAQ 100', 'S&P 500']},
    'INTU': {'name': 'Intuit Inc.', 'sector': 'Technology', 'indices': ['NASDAQ 100', 'S&P 500']},
    'BKNG': {'name': 'Booking Holdings Inc.', 'sector': 'Consumer Discretionary', 'indices': ['NASDAQ 100', 'S&P 500']},
    'ADSK': {'name': 'Autodesk Inc.', 'sector': 'Technology', 'indices': ['NASDAQ 100', 'S&P 500']},
    'CDNS': {'name': 'Cadence Design Systems Inc.', 'sector': 'Technology', 'indices': ['NASDAQ 100', 'S&P 500']},
    'MRNA': {'name': 'Moderna Inc.', 'sector': 'Healthcare', 'indices': ['NASDAQ 100', 'S&P 500']},
    'LRCX': {'name': 'Lam Research Corp.', 'sector': 'Technology', 'indices': ['NASDAQ 100', 'S&P 500']},
    'CHTR': {'name': 'Charter Communications Inc.', 'sector': 'Communication Services',
             'indices': ['NASDAQ 100', 'S&P 500']},
    'FISV': {'name': 'Fiserv Inc.', 'sector': 'Financials', 'indices': ['NASDAQ 100', 'S&P 500']},
    'SNPS': {'name': 'Synopsys Inc.', 'sector': 'Technology', 'indices': ['NASDAQ 100', 'S&P 500']},
    'WDAY': {'name': 'Workday Inc.', 'sector': 'Technology', 'indices': ['NASDAQ 100', 'S&P 500']},
    'ROST': {'name': 'Ross Stores Inc.', 'sector': 'Consumer Discretionary', 'indices': ['NASDAQ 100', 'S&P 500']},
    'EXC': {'name': 'Exelon Corp.', 'sector': 'Utilities', 'indices': ['NASDAQ 100', 'S&P 500']},
    'EA': {'name': 'Electronic Arts Inc.', 'sector': 'Communication Services', 'indices': ['NASDAQ 100', 'S&P 500']},
    'JPM': {'name': 'JPMorgan Chase & Co.', 'sector': 'Financials', 'indices': ['S&P 500', 'DJIA']},
    'BRK.B': {'name': 'Berkshire Hathaway Inc. (Class B)', 'sector': 'Financials', 'indices': ['S&P 500']},
    'V': {'name': 'Visa Inc. (Class A)', 'sector': 'Financials', 'indices': ['S&P 500', 'DJIA']},
    'UNH': {'name': 'UnitedHealth Group Inc.', 'sector': 'Healthcare', 'indices': ['S&P 500', 'DJIA']},
    'LLY': {'name': 'Eli Lilly and Co.', 'sector': 'Healthcare', 'indices': ['S&P 500']},
    'XOM': {'name': 'Exxon Mobil Corp.', 'sector': 'Energy', 'indices': ['S&P 500', 'DJIA']},
    'WMT': {'name': 'Walmart Inc.', 'sector': 'Consumer Staples', 'indices': ['S&P 500', 'DJIA']},
    'PG': {'name': 'Procter & Gamble Co.', 'sector': 'Consumer Staples', 'indices': ['S&P 500', 'DJIA']},
    'KO': {'name': 'Coca-Cola Co.', 'sector': 'Consumer Staples', 'indices': ['S&P 500', 'DJIA']},
    'CVX': {'name': 'Chevron Corp.', 'sector': 'Energy', 'indices': ['S&P 500', 'DJIA']},
    'BAC': {'name': 'Bank of America Corp.', 'sector': 'Financials', 'indices': ['S&P 500']},
    'PFE': {'name': 'Pfizer Inc.', 'sector': 'Healthcare', 'indices': ['S&P 500']},
    'CRM': {'name': 'Salesforce Inc.', 'sector': 'Technology', 'indices': ['S&P 500', 'DJIA']},
    'DIS': {'name': 'The Walt Disney Co.', 'sector': 'Communication Services', 'indices': ['S&P 500']},
    'HD': {'name': 'Home Depot Inc.', 'sector': 'Consumer Discretionary', 'indices': ['S&P 500', 'DJIA']},
    'DHR': {'name': 'Danaher Corp.', 'sector': 'Healthcare', 'indices': ['S&P 500']},
    'HON': {'name': 'Honeywell International Inc.', 'sector': 'Industrials', 'indices': ['S&P 500', 'DJIA']},
    'T': {'name': 'AT&T Inc.', 'sector': 'Communication Services', 'indices': ['S&P 500']},
    'IBM': {'name': 'International Business Machines Corp.', 'sector': 'Technology', 'indices': ['S&P 500', 'DJIA']},
    'BA': {'name': 'The Boeing Co.', 'sector': 'Industrials', 'indices': ['S&P 500', 'DJIA']},
    'CAT': {'name': 'Caterpillar Inc.', 'sector': 'Industrials', 'indices': ['S&P 500', 'DJIA']},
    'GS': {'name': 'Goldman Sachs Group Inc.', 'sector': 'Financials', 'indices': ['S&P 500', 'DJIA']},
    'NKE': {'name': 'NIKE Inc. (Class B)', 'sector': 'Consumer Discretionary', 'indices': ['S&P 500', 'DJIA']},
    'MCD': {'name': 'McDonald\'s Corp.', 'sector': 'Consumer Discretionary', 'indices': ['S&P 500', 'DJIA']},
    'MMM': {'name': '3M Co.', 'sector': 'Industrials', 'indices': ['S&P 500', 'DJIA']},
    'TRV': {'name': 'The Travelers Cos. Inc.', 'sector': 'Financials', 'indices': ['S&P 500', 'DJIA']},
    'JNJ': {'name': 'Johnson & Johnson', 'sector': 'Healthcare', 'indices': ['S&P 500', 'DJIA']},
    'ACN': {'name': 'Accenture Plc (Class A)', 'sector': 'Information Technology', 'indices': ['S&P 500']},
    'PM': {'name': 'Philip Morris International Inc.', 'sector': 'Consumer Staples', 'indices': ['S&P 500']},
    'UPS': {'name': 'United Parcel Service Inc. (Class B)', 'sector': 'Industrials', 'indices': ['S&P 500']},
    'SCHW': {'name': 'Charles Schwab Corp.', 'sector': 'Financials', 'indices': ['S&P 500']},
    'GM': {'name': 'General Motors Co.', 'sector': 'Consumer Discretionary', 'indices': ['S&P 500']},
    'DE': {'name': 'Deere & Co.', 'sector': 'Industrials', 'indices': ['S&P 500']},
    'RTX': {'name': 'RTX Corp.', 'sector': 'Industrials', 'indices': ['S&P 500']},
    'SYK': {'name': 'Stryker Corp.', 'sector': 'Healthcare', 'indices': ['S&P 500']},
    'CVS': {'name': 'CVS Health Corp.', 'sector': 'Healthcare', 'indices': ['S&P 500']},
    'DUK': {'name': 'Duke Energy Corp.', 'sector': 'Utilities', 'indices': ['S&P 500']},
    'SO': {'name': 'The Southern Co.', 'sector': 'Utilities', 'indices': ['S&P 500']},
    'ELV': {'name': 'Elevance Health Inc.', 'sector': 'Healthcare', 'indices': ['S&P 500']},
    'AIG': {'name': 'American International Group Inc.', 'sector': 'Financials', 'indices': ['S&P 500']},
    'USB': {'name': 'U.S. Bancorp', 'sector': 'Financials', 'indices': ['S&P 500']},
    'LMT': {'name': 'Lockheed Martin Corp.', 'sector': 'Industrials', 'indices': ['S&P 500']},
    'MO': {'name': 'Altria Group Inc.', 'sector': 'Consumer Staples', 'indices': ['S&P 500']},
    'WFC': {'name': 'Wells Fargo & Co.', 'sector': 'Financials', 'indices': ['S&P 500']},
    'CL': {'name': 'Colgate-Palmolive Co.', 'sector': 'Consumer Staples', 'indices': ['S&P 500']},
    'CB': {'name': 'Chubb Ltd.', 'sector': 'Financials', 'indices': ['S&P 500']},
    'COP': {'name': 'ConocoPhillips', 'sector': 'Energy', 'indices': ['S&P 500']},
    'FCX': {'name': 'Freeport-McMoRan Inc.', 'sector': 'Materials', 'indices': ['S&P 500']},
    'SLB': {'name': 'Schlumberger Ltd.', 'sector': 'Energy', 'indices': ['S&P 500']},
    'MET': {'name': 'MetLife Inc.', 'sector': 'Financials', 'indices': ['S&P 500']},
    'BAX': {'name': 'Baxter International Inc.', 'sector': 'Healthcare', 'indices': ['S&P 500']},
    'WBA': {'name': 'Walgreens Boots Alliance Inc.', 'sector': 'Consumer Staples', 'indices': ['S&P 500']},
    'PNC': {'name': 'PNC Financial Services Group Inc.', 'sector': 'Financials', 'indices': ['S&P 500']},
    'LVS': {'name': 'Las Vegas Sands Corp.', 'sector': 'Consumer Discretionary', 'indices': ['S&P 500']},
    'BDX': {'name': 'Becton, Dickinson and Co.', 'sector': 'Healthcare', 'indices': ['S&P 500']},
    'EOG': {'name': 'EOG Resources Inc.', 'sector': 'Energy', 'indices': ['S&P 500']},
    'ITW': {'name': 'Illinois Tool Works Inc.', 'sector': 'Industrials', 'indices': ['S&P 500']},
    'GE': {'name': 'General Electric Co.', 'sector': 'Industrials', 'indices': ['S&P 500']},
    'PRU': {'name': 'Prudential Financial Inc.', 'sector': 'Financials', 'indices': ['S&P 500']},
    'DOW': {'name': 'Dow Inc.', 'sector': 'Materials', 'indices': ['S&P 500']},
    'MS': {'name': 'Morgan Stanley', 'sector': 'Financials', 'indices': ['S&P 500']},
    'UNP': {'name': 'Union Pacific Corp.', 'sector': 'Industrials', 'indices': ['S&P 500']},
    'SPG': {'name': 'Simon Property Group Inc.', 'sector': 'Real Estate', 'indices': ['S&P 500']},
    'XEL': {'name': 'Xcel Energy Inc.', 'sector': 'Utilities', 'indices': ['S&P 500']},
    'AEP': {'name': 'American Electric Power Co. Inc.', 'sector': 'Utilities', 'indices': ['S&P 500']},
    'PCG': {'name': 'PG&E Corp.', 'sector': 'Utilities', 'indices': ['S&P 500']},
    'NEE': {'name': 'NextEra Energy Inc.', 'sector': 'Utilities', 'indices': ['S&P 500']},
    'ETR': {'name': 'Entergy Corp.', 'sector': 'Utilities', 'indices': ['S&P 500']}
}

ETF_SYMBOLS_AND_INFO = {
    'SPY': {'name': 'SPDR S&P 500 ETF Trust', 'sector': 'Diversified', 'indices': ['S&P 500'], 'country': 'USA'},
    'IVV': {'name': 'iShares Core S&P 500 ETF', 'sector': 'Diversified', 'indices': ['S&P 500'], 'country': 'USA'},
    'VOO': {'name': 'Vanguard S&P 500 ETF', 'sector': 'Diversified', 'indices': ['S&P 500'], 'country': 'USA'},
    'QQQ': {'name': 'Invesco QQQ Trust', 'sector': 'Technology-Focused', 'indices': ['NASDAQ 100'], 'country': 'USA'},
    'VTI': {'name': 'Vanguard Total Stock Market ETF', 'sector': 'Diversified', 'indices': ['Total US Market'],
            'country': 'USA'},
    'XLK': {'name': 'Technology Select Sector SPDR Fund', 'sector': 'Technology', 'indices': ['S&P 500 Sectors'],
            'country': 'USA'},
    'XLF': {'name': 'Financial Select Sector SPDR Fund', 'sector': 'Financials', 'indices': ['S&P 500 Sectors'],
            'country': 'USA'},
    'XLV': {'name': 'Health Care Select Sector SPDR Fund', 'sector': 'Healthcare', 'indices': ['S&P 500 Sectors'],
            'country': 'USA'},
    'XLE': {'name': 'Energy Select Sector SPDR Fund', 'sector': 'Energy', 'indices': ['S&P 500 Sectors'],
            'country': 'USA'},
    'VGT': {'name': 'Vanguard Information Technology ETF', 'sector': 'Technology', 'indices': ['MSCI US IMI'],
            'country': 'USA'},
    'IYR': {'name': 'iShares U.S. Real Estate ETF', 'sector': 'Real Estate', 'indices': ['Dow Jones U.S. Real Estate'],
            'country': 'USA'},
    'SMH': {'name': 'VanEck Semiconductor ETF', 'sector': 'Technology', 'indices': ['MVIS US Listed Semiconductor 25'],
            'country': 'USA'},
    'DIA': {'name': 'SPDR Dow Jones Industrial Avg ETF', 'sector': 'Diversified', 'indices': ['DJIA'],
            'country': 'USA'},
    'XLI': {'name': 'Industrial Select Sector SPDR Fund', 'sector': 'Industrials', 'indices': ['S&P 500 Sectors'],
            'country': 'USA'}, 'XLP': {'name': 'Consumer Staples Select Sector SPDR Fund', 'sector': 'Consumer Staples',
                                       'indices': ['S&P 500 Sectors'], 'country': 'USA'},
    'XLY': {'name': 'Consumer Discretionary Select Sector SPDR Fund', 'sector': 'Consumer Discretionary',
            'indices': ['S&P 500 Sectors'], 'country': 'USA'},
    'XLB': {'name': 'Materials Select Sector SPDR Fund', 'sector': 'Materials', 'indices': ['S&P 500 Sectors'],
            'country': 'USA'},
    'XLC': {'name': 'Communication Services Select Sector SPDR Fund', 'sector': 'Communication Services',
            'indices': ['S&P 500 Sectors'], 'country': 'USA'},
    'XLU': {'name': 'Utilities Select Sector SPDR Fund', 'sector': 'Utilities', 'indices': ['S&P 500 Sectors'],
            'country': 'USA'},
    'VNQ': {'name': 'Vanguard Real Estate ETF', 'sector': 'Real Estate', 'indices': ['MSCI US REIT'], 'country': 'USA'},
    'VXUS': {'name': 'Vanguard Total International Stock ETF', 'sector': 'Diversified International',
             'indices': ['FTSE Global All Cap ex US'], 'country': 'Global'},
    'VEA': {'name': 'Vanguard FTSE Developed Markets ETF', 'sector': 'Developed Markets Equity',
            'indices': ['FTSE Developed All Cap ex US'], 'country': 'Global'},
    'IEFA': {'name': 'iShares Core MSCI EAFE ETF', 'sector': 'Developed Markets Equity', 'indices': ['MSCI EAFE'],
             'country': 'Global'},
    'VWO': {'name': 'Vanguard FTSE Emerging Markets ETF', 'sector': 'Emerging Markets Equity',
            'indices': ['FTSE Emerging Markets'], 'country': 'Global'},
    'IEMG': {'name': 'iShares Core MSCI Emerging Markets ETF', 'sector': 'Emerging Markets Equity',
             'indices': ['MSCI Emerging Markets'], 'country': 'Global'},
    'EFA': {'name': 'iShares MSCI EAFE ETF', 'sector': 'Developed Markets Equity', 'indices': ['MSCI EAFE'],
            'country': 'Global'},
    'EWJ': {'name': 'iShares MSCI Japan ETF', 'sector': 'Single Country Equity', 'indices': ['MSCI Japan'],
            'country': 'Japan'},
    'FXI': {'name': 'iShares China Large-Cap ETF', 'sector': 'Single Country Equity', 'indices': ['FTSE China 50'],
            'country': 'China'},
    'DAX': {'name': 'iShares Core DAX UCITS ETF (Acc)', 'sector': 'Single Country Equity', 'indices': ['DAX 40'],
            'country': 'Germany'},
    'EWW': {'name': 'iShares MSCI Mexico ETF', 'sector': 'Single Country Equity', 'indices': ['MSCI Mexico'],
            'country': 'Mexico'},
    'EWC': {'name': 'iShares MSCI Canada ETF', 'sector': 'Single Country Equity', 'indices': ['MSCI Canada'],
            'country': 'Canada'},
    'EWG': {'name': 'iShares MSCI Germany ETF', 'sector': 'Single Country Equity', 'indices': ['MSCI Germany'],
            'country': 'Germany'},
    'EWS': {'name': 'iShares MSCI Singapore ETF', 'sector': 'Single Country Equity', 'indices': ['MSCI Singapore'],
            'country': 'Singapore'},
    'EWL': {'name': 'iShares MSCI Switzerland ETF', 'sector': 'Single Country Equity', 'indices': ['MSCI Switzerland'],
            'country': 'Switzerland'},
    'EWP': {'name': 'iShares MSCI Spain Capped ETF', 'sector': 'Single Country Equity', 'indices': ['MSCI Spain'],
            'country': 'Spain'},
    'EWI': {'name': 'iShares MSCI Italy Capped ETF', 'sector': 'Single Country Equity', 'indices': ['MSCI Italy'],
            'country': 'Italy'},
    'EWO': {'name': 'iShares MSCI Austria Capped ETF', 'sector': 'Single Country Equity', 'indices': ['MSCI Austria'],
            'country': 'Austria'},
    'INDA': {'name': 'iShares MSCI India ETF', 'sector': 'Single Country Equity', 'indices': ['MSCI India'],
             'country': 'India'},
    'FLJP': {'name': 'Franklin FTSE Japan ETF', 'sector': 'Single Country Equity', 'indices': ['FTSE Japan'],
             'country': 'Japan'},
    'FLCH': {'name': 'Franklin FTSE China ETF', 'sector': 'Single Country Equity', 'indices': ['FTSE China'],
             'country': 'China'}
}

BOND_TYPES = [
    {'symbol': 'US_T_BOND_2YR', 'name': 'US Treasury Note (2 Year)', 'issuer': 'US Treasury',
     'sector': 'Government Bonds', 'country': 'USA'},
    {'symbol': 'US_T_BOND_5YR', 'name': 'US Treasury Note (5 Year)', 'issuer': 'US Treasury',
     'sector': 'Government Bonds', 'country': 'USA'},
    {'symbol': 'US_T_BOND_7YR', 'name': 'US Treasury Note (7 Year)', 'issuer': 'US Treasury',
     'sector': 'Government Bonds', 'country': 'USA'},
    {'symbol': 'US_T_BOND_10YR', 'name': 'US Treasury Note (10 Year)', 'issuer': 'US Treasury',
     'sector': 'Government Bonds', 'country': 'USA'},
    {'symbol': 'US_T_BOND_20YR', 'name': 'US Treasury Bond (20 Year)', 'issuer': 'US Treasury',
     'sector': 'Government Bonds', 'country': 'USA'},
    {'symbol': 'US_T_BOND_30YR', 'name': 'US Treasury Bond (30 Year)', 'issuer': 'US Treasury',
     'sector': 'Government Bonds', 'country': 'USA'},
    {'symbol': 'US_TIPS_5YR', 'name': 'US TIPS (5 Year)', 'issuer': 'US Treasury',
     'sector': 'Inflation-Protected Bonds', 'country': 'USA'},
    {'symbol': 'US_TIPS_10YR', 'name': 'US TIPS (10 Year)', 'issuer': 'US Treasury',
     'sector': 'Inflation-Protected Bonds', 'country': 'USA'},
    {'symbol': 'US_TIPS_30YR', 'name': 'US TIPS (30 Year)', 'issuer': 'US Treasury',
     'sector': 'Inflation-Protected Bonds', 'country': 'USA'},
    {'symbol': 'US_MUNI_BOND', 'name': 'US Municipal Bond (Generic)', 'issuer': 'Various US Municipalities',
     'sector': 'Municipal Bonds', 'country': 'USA'},
    {'symbol': 'CORP_BOND_TECH_A', 'name': 'Tech Corp Bond A', 'issuer': 'Generic Tech Co. A',
     'sector': 'Corporate Bonds', 'country': 'USA'},
    {'symbol': 'CORP_BOND_FIN_B', 'name': 'Financial Corp Bond B', 'issuer': 'Generic Financial Co. B',
     'sector': 'Corporate Bonds', 'country': 'USA'},
    {'symbol': 'CORP_BOND_UTIL_C', 'name': 'Utility Corp Bond C', 'issuer': 'Generic Utility Co. C',
     'sector': 'Corporate Bonds', 'country': 'USA'},
    {'symbol': 'CORP_BOND_CONS_D', 'name': 'Consumer Corp Bond D', 'issuer': 'Generic Consumer Co. D',
     'sector': 'Corporate Bonds', 'country': 'USA'},
    {'symbol': 'CORP_BOND_HEALTH_E', 'name': 'Healthcare Corp Bond E', 'issuer': 'Generic Healthcare Co. E',
     'sector': 'Corporate Bonds', 'country': 'USA'},
    {'symbol': 'CORP_BOND_IND_F', 'name': 'Industrial Corp Bond F', 'issuer': 'Generic Industrial Co. F',
     'sector': 'Corporate Bonds', 'country': 'USA'},
    {'symbol': 'CORP_BOND_COMM_G', 'name': 'Comm Services Corp Bond G', 'issuer': 'Generic Comm Co. G',
     'sector': 'Corporate Bonds', 'country': 'USA'},
    {'symbol': 'CORP_BOND_MAT_H', 'name': 'Materials Corp Bond H', 'issuer': 'Generic Materials Co. H',
     'sector': 'Corporate Bonds', 'country': 'USA'},
    {'symbol': 'CORP_BOND_ENG_I', 'name': 'Energy Corp Bond I', 'issuer': 'Generic Energy Co. I',
     'sector': 'Corporate Bonds', 'country': 'USA'},
    {'symbol': 'CORP_BOND_REAL_J', 'name': 'Real Estate Corp Bond J', 'issuer': 'Generic Real Estate Co. J',
     'sector': 'Corporate Bonds', 'country': 'USA'},
    {'symbol': 'GER_BUND_5YR', 'name': 'German Bund (5 Year)', 'issuer': 'German Federal Government',
     'sector': 'Government Bonds', 'country': 'Germany'},
    {'symbol': 'GER_BUND_10YR', 'name': 'German Bund (10 Year)', 'issuer': 'German Federal Government',
     'sector': 'Government Bonds', 'country': 'Germany'},
    {'symbol': 'UK_GILT_5YR', 'name': 'UK Gilt (5 Year)', 'issuer': 'UK Government', 'sector': 'Government Bonds',
     'country': 'United Kingdom'},
    {'symbol': 'UK_GILT_10YR', 'name': 'UK Gilt (10 Year)', 'issuer': 'UK Government', 'sector': 'Government Bonds',
     'country': 'United Kingdom'},
    {'symbol': 'JAP_JGB_5YR', 'name': 'Japanese Government Bond (5 Year)', 'issuer': 'Japanese Government',
     'sector': 'Government Bonds', 'country': 'Japan'},
    {'symbol': 'JAP_JGB_10YR', 'name': 'Japanese Government Bond (10 Year)', 'issuer': 'Japanese Government',
     'sector': 'Government Bonds', 'country': 'Japan'},
    {'symbol': 'CAN_GB_5YR', 'name': 'Canadian Government Bond (5 Year)', 'issuer': 'Government of Canada',
     'sector': 'Government Bonds', 'country': 'Canada'},
    {'symbol': 'CAN_GB_10YR', 'name': 'Canadian Government Bond (10 Year)', 'issuer': 'Government of Canada',
     'sector': 'Government Bonds', 'country': 'Canada'},
    {'symbol': 'AUS_GB_5YR', 'name': 'Australian Government Bond (5 Year)', 'issuer': 'Australian Government',
     'sector': 'Government Bonds', 'country': 'Australia'},
    {'symbol': 'AUS_GB_10YR', 'name': 'Australian Government Bond (10 Year)', 'issuer': 'Australian Government',
     'sector': 'Government Bonds', 'country': 'Australia'},
    {'symbol': 'INTL_CORP_EU_A', 'name': 'Eurozone Corp Bond A', 'issuer': 'EuroCo A', 'sector': 'Corporate Bonds',
     'country': 'Germany'},
    {'symbol': 'INTL_CORP_EU_B', 'name': 'Eurozone Corp Bond B', 'issuer': 'EuroCo B', 'sector': 'Corporate Bonds',
     'country': 'France'},
    {'symbol': 'INTL_CORP_ASIA_C', 'name': 'Asia Corp Bond C', 'issuer': 'AsiaCo C', 'sector': 'Corporate Bonds',
     'country': 'Japan'},
    {'symbol': 'INTL_CORP_ASIA_D', 'name': 'Asia Corp Bond D', 'issuer': 'AsiaCo D', 'sector': 'Corporate Bonds',
     'country': 'China'},
    {'symbol': 'INTL_CORP_UK_E', 'name': 'UK Corp Bond E', 'issuer': 'UKCo E', 'sector': 'Corporate Bonds',
     'country': 'United Kingdom'},
    {'symbol': 'INTL_CORP_CAN_F', 'name': 'Canadian Corp Bond F', 'issuer': 'CanadaCo F', 'sector': 'Corporate Bonds',
     'country': 'Canada'}, {'symbol': 'INTL_CORP_AUS_G', 'name': 'Australian Corp Bond G', 'issuer': 'AustraliaCo G',
                            'sector': 'Corporate Bonds', 'country': 'Australia'},
    {'symbol': 'INTL_CORP_EM_H', 'name': 'Emerging Market Corp Bond H', 'issuer': 'EMCo H',
     'sector': 'Emerging Market Corporate Bonds', 'country': 'Brazil'},
    {'symbol': 'INTL_CORP_EM_I', 'name': 'Emerging Market Corp Bond I', 'issuer': 'EMCo I',
     'sector': 'Emerging Market Corporate Bonds', 'country': 'India'},
    {'symbol': 'INTL_CORP_EM_J', 'name': 'Emerging Market Corp Bond J', 'issuer': 'EMCo J',
     'sector': 'Emerging Market Corporate Bonds', 'country': 'Mexico'}]


ALL_ASSET_SYMBOLS = list(STOCK_SYMBOLS_AND_INFO.keys()) + list(ETF_SYMBOLS_AND_INFO.keys()) + [b['symbol'] for b in
                                                                                               BOND_TYPES]
ALL_ASSET_INFO = {**STOCK_SYMBOLS_AND_INFO, **ETF_SYMBOLS_AND_INFO}
for b in BOND_TYPES: ALL_ASSET_INFO[b['symbol']] = b

SENTIMENT_OPTIONS = ["positive", "negative", "neutral", "mixed"]
NEWS_EVENT_THEMES = [
    "strong earnings", "new product launch", "regulatory challenge", "economic slowdown",
    "acquisition rumor", "patent dispute", "CEO change", "supply chain disruption",
    "dividend increase", "stock split announcement", "cybersecurity breach", "environmental lawsuit"
]
GENERAL_MARKET_EVENTS = [
    "inflation data release", "central bank interest rate decision", "global supply chain disruption",
    "energy prices fluctuation", "consumer spending trends", "employment report surprising figures",
    "geopolitical tensions impacting trade", "housing market slowdown", "manufacturing PMI growth"
]
REPORT_TYPES = ["Q1 Earnings Summary", "Q2 Earnings Summary", "Q3 Earnings Summary", "Q4 Earnings Summary",
                "Annual Analyst Report", "Regulatory Filing Update", "Sustainability Report Summary"]
REPORT_FOCUS_THEMES = [
    "revenue growth", "new product pipeline", "compliance challenges", "market share shifts",
    "sustainability efforts", "cost-cutting measures", "research & development breakthroughs",
    "debt restructuring", "merger and acquisition impact", "divestiture plans"
]
THEME_INDUSTRIES = [
    "impact of AI on enterprise software", "future of renewable energy investment",
    "global supply chain resilience", "consumer spending habits in inflationary environment",
    "rise of fintech innovation", "challenges in global semiconductor production",
    "evolution of healthcare technology", "urban development and real estate trends",
    "future of remote work and its economic impact"
]


# --- Gemini API Configuration ---
def configure_gemini():
    if not GEMINI_API_KEY:
        raise ValueError("GEMINI_API_KEY environment variable not set. Please set it to your Gemini API key.")
    genai.configure(api_key=GEMINI_API_KEY)
    # Using 'gemini-pro' as a stable default, adjust if you prefer flash/1.5-pro etc.
    return genai.GenerativeModel('gemini-2.5-pro')


gemini_model = None  # Initialize after check


# --- Helper Functions ---
def load_prompt_template(filepath):
    """Loads a prompt template from a .txt file."""
    try:
        with open(filepath, 'r') as f:
            return f.read()
    except FileNotFoundError:
        print(f"Error: Prompt file not found at {filepath}")
        return None


def call_gemini_api(prompt, model, max_retries=3, delay=GEMINI_REQUEST_DELAY_SECONDS):
    """Calls Gemini API with retry logic and rate limiting."""
    for attempt in range(max_retries):
        try:
            response = model.generate_content(
                prompt,
                generation_config=genai.types.GenerationConfig(
                    response_mime_type="application/json"
                ),
                safety_settings={
                    'HARM_CATEGORY_HARASSMENT': 'BLOCK_NONE',
                    'HARM_CATEGORY_HATE_SPEECH': 'BLOCK_NONE',
                    'HARM_CATEGORY_SEXUALLY_EXPLICIT': 'BLOCK_NONE',
                    'HARM_CATEGORY_DANGEROUS_CONTENT': 'BLOCK_NONE',
                }
            )
            content_text = response.text
            return json.loads(content_text)
        except json.JSONDecodeError as e:
            print(f"JSON decode error on attempt {attempt + 1}: {e}. Response: {response.text}")
            time.sleep(delay * (attempt + 1))
        except Exception as e:
            print(f"Gemini API error on attempt {attempt + 1}: {e}")
            time.sleep(delay * (attempt + 1))
    print(f"Failed to get valid JSON response from Gemini after {max_retries} attempts.")
    return None


def generate_news_articles(num_specific: int, num_general: int, output_filepath: str):
    """Generates synthetic news articles using Gemini API and writes to file."""
    news_articles_generated = 0
    specific_news_template = load_prompt_template(PROMPT_FILES["specific_news"])
    general_news_template = load_prompt_template(PROMPT_FILES["general_news"])

    if not specific_news_template or not general_news_template:
        print("Could not load news prompt templates. Exiting news generation.")
        return 0

    print(f"\nGenerating news articles to '{output_filepath}'...")
    with open(output_filepath, 'a') as f:  # Open in append mode
        # Generate specific news (tied to assets)
        print("Generating specific news articles...")
        specific_assets_to_cover = random.sample(
            list(STOCK_SYMBOLS_AND_INFO.keys()) + list(ETF_SYMBOLS_AND_INFO.keys()),
            min(num_specific, len(STOCK_SYMBOLS_AND_INFO) + len(ETF_SYMBOLS_AND_INFO))
        )

        for symbol in tqdm(specific_assets_to_cover, desc="Specific News"):
            current_datetime_str = datetime.now().isoformat(timespec='seconds')
            asset_info = STOCK_SYMBOLS_AND_INFO.get(symbol) or ETF_SYMBOLS_AND_INFO.get(symbol)

            prompt = specific_news_template.format(
                COMPANY_NAME=asset_info['name'],
                SYMBOL=symbol,
                SECTOR=asset_info['sector'],
                SENTIMENT=random.choice(SENTIMENT_OPTIONS),
                EVENT_THEME=random.choice(NEWS_EVENT_THEMES),
                CURRENT_DATETIME_STRING=current_datetime_str
            )
            generated_data = call_gemini_api(prompt, gemini_model)
            time.sleep(GEMINI_REQUEST_DELAY_SECONDS)

            if generated_data:
                article = {
                    'article_id': str(uuid.uuid4()),
                    'title': generated_data.get('title', 'No Title'),
                    'content': generated_data.get('content', 'No content generated.'),
                    'source': generated_data.get('source', random.choice(
                        ["Financial Today", "Global Market News", "Investment Daily"])),
                    'published_date': current_datetime_str,
                    'url': f"http://fakenews.com/article/{uuid.uuid4().hex[:8]}",
                    'entities': generated_data.get('entities', [symbol, asset_info['sector']]),
                    'sentiment': generated_data.get('sentiment', random.choice(SENTIMENT_OPTIONS)),
                    'last_updated': datetime.now().isoformat(timespec='seconds')
                }
                f.write(json.dumps(article) + '\n')
                news_articles_generated += 1

        # Generate general market news
        print("\nGenerating general market news articles...")
        for _ in tqdm(range(num_general), desc="General News"):
            current_datetime_str = datetime.now().isoformat(timespec='seconds')

            prompt = general_news_template.format(
                GENERAL_MARKET_EVENT=random.choice(GENERAL_MARKET_EVENTS),
                SENTIMENT=random.choice(SENTIMENT_OPTIONS),
                CURRENT_DATETIME_STRING=current_datetime_str
            )
            generated_data = call_gemini_api(prompt, gemini_model)
            time.sleep(GEMINI_REQUEST_DELAY_SECONDS)

            if generated_data:
                article = {
                    'article_id': str(uuid.uuid4()),
                    'title': generated_data.get('title', 'No Title'),
                    'content': generated_data.get('content', 'No content generated.'),
                    'source': generated_data.get('source', random.choice(
                        ["Global Econ Report", "Market Watch", "Business Trends Daily"])),
                    'published_date': current_datetime_str,
                    'url': f"http://fakenews.com/general/{uuid.uuid4().hex[:8]}",
                    'entities': generated_data.get('entities',
                                                   [random.choice(["Economy", "Global Market", "Interest Rates"])]),
                    'sentiment': generated_data.get('sentiment', random.choice(SENTIMENT_OPTIONS)),
                    'last_updated': datetime.now().isoformat(timespec='seconds')
                }
                f.write(json.dumps(article) + '\n')
                news_articles_generated += 1
    return news_articles_generated


def generate_reports(num_specific: int, num_thematic: int, output_filepath: str):
    """Generates synthetic financial reports using Gemini API and writes to file."""
    reports_generated = 0
    specific_report_template = load_prompt_template(PROMPT_FILES["specific_report"])
    thematic_report_template = load_prompt_template(PROMPT_FILES["thematic_report"])

    if not specific_report_template or not thematic_report_template:
        print("Could not load report prompt templates. Exiting report generation.")
        return 0

    print(f"\nGenerating financial reports to '{output_filepath}'...")
    with open(output_filepath, 'a') as f:  # Open in append mode
        # Generate specific reports (tied to assets)
        print("Generating specific financial reports...")
        specific_assets_for_reports = random.sample(
            list(STOCK_SYMBOLS_AND_INFO.keys()) + list(ETF_SYMBOLS_AND_INFO.keys()),
            min(num_specific, len(STOCK_SYMBOLS_AND_INFO) + len(ETF_SYMBOLS_AND_INFO))
        )

        for symbol in tqdm(specific_assets_for_reports, desc="Specific Reports"):
            current_datetime_str = datetime.now().isoformat(timespec='seconds')
            asset_info = STOCK_SYMBOLS_AND_INFO.get(symbol) or ETF_SYMBOLS_AND_INFO.get(symbol)

            prompt = specific_report_template.format(
                COMPANY_NAME=asset_info['name'],
                SYMBOL=symbol,
                SECTOR=asset_info['sector'],
                REPORT_TYPE=random.choice(REPORT_TYPES),
                REPORT_FOCUS=random.choice(REPORT_FOCUS_THEMES),
                SENTIMENT=random.choice(SENTIMENT_OPTIONS),
                CURRENT_DATETIME_STRING=current_datetime_str
            )
            generated_data = call_gemini_api(prompt, gemini_model)
            time.sleep(GEMINI_REQUEST_DELAY_SECONDS)

            if generated_data:
                report = {
                    'report_id': str(uuid.uuid4()),
                    'title': generated_data.get('title', 'No Title'),
                    'content': generated_data.get('content', 'No content generated.'),
                    'company_symbol': symbol,
                    'report_type': generated_data.get('report_type', random.choice(REPORT_TYPES)),
                    'report_date': current_datetime_str,
                    'author': generated_data.get('author',
                                                 random.choice(["AI Financial Insights", "Market Analytics Unit"])),
                    'url': f"http://fakereports.com/company/{symbol}/{uuid.uuid4().hex[:8]}",
                    'entities': generated_data.get('entities', [symbol, asset_info['sector']]),
                    'last_updated': datetime.now().isoformat(timespec='seconds')
                }
                f.write(json.dumps(report) + '\n')
                reports_generated += 1

        # Generate thematic/sector reports
        print("\nGenerating thematic/sector financial reports...")
        for _ in tqdm(range(num_thematic), desc="Thematic Reports"):
            current_datetime_str = datetime.now().isoformat(timespec='seconds')

            prompt = thematic_report_template.format(
                THEME_INDUSTRY=random.choice(THEME_INDUSTRIES),
                FINDINGS_OUTLOOK=random.choice(REPORT_FOCUS_THEMES),
                SENTIMENT=random.choice(SENTIMENT_OPTIONS),
                CURRENT_DATETIME_STRING=current_datetime_str
            )
            generated_data = call_gemini_api(prompt, gemini_model)
            time.sleep(GEMINI_REQUEST_DELAY_SECONDS)

            if generated_data:
                report = {
                    'report_id': str(uuid.uuid4()),
                    'title': generated_data.get('title', 'No Title'),
                    'content': generated_data.get('content', 'No content generated.'),
                    'company_symbol': None,
                    'report_type': generated_data.get('report_type', random.choice(REPORT_TYPES)),
                    'report_date': current_datetime_str,
                    'author': generated_data.get('author',
                                                 random.choice(["Global Research Unit", "Economic Insight Team"])),
                    'url': f"http://fakereports.com/thematic/{uuid.uuid4().hex[:8]}",
                    'entities': generated_data.get('entities', [random.choice(THEME_INDUSTRIES)]),
                    'last_updated': datetime.now().isoformat(timespec='seconds')
                }
                f.write(json.dumps(report) + '\n')
                reports_generated += 1
    return reports_generated


# --- Elasticsearch Ingestion Functions ---
def _read_and_chunk_from_file(filepath, index_name, id_key_in_doc, batch_size):  # **FIXED: Ensure index_name is here**
    """
    Generator to read documents from a JSONL file in chunks,
    with logging for each chunk being prepared.
    """
    current_chunk = []
    line_num = 0

    try:
        with open(filepath, 'r') as f:
            for line_num, line in enumerate(f, 1):
                try:
                    doc = json.loads(line)
                    action = {
                        "_index": index_name,  # **FIXED: This line must be present**
                        "_id": doc[id_key_in_doc],
                        "_source": doc,
                    }
                    current_chunk.append(action)

                    if len(current_chunk) == batch_size:
                        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                        print(
                            f"[{timestamp}] - Reading '{filepath}': Preparing batch {line_num // batch_size} (Size: {len(current_chunk)} docs).")
                        yield from current_chunk
                        current_chunk = []
                except json.JSONDecodeError as e:
                    print(f"WARNING: Skipping malformed JSON on line {line_num} in '{filepath}': {e}")
                except KeyError as e:
                    print(
                        f"WARNING: Skipping document on line {line_num} in '{filepath}' due to missing ID field '{id_key_in_doc}': {e}")
                except Exception as e:
                    print(f"WARNING: An unexpected error occurred on line {line_num} in '{filepath}': {e}")
    except FileNotFoundError:
        print(f"ERROR: Data file not found at '{filepath}'. Cannot ingest.")
        return  # Exit generator if file not found
    except Exception as e:
        print(f"ERROR: An error occurred while reading file '{filepath}': {e}")
        return

    # Yield any remaining documents in the last chunk
    if current_chunk:
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        print(f"[{timestamp}] - Reading '{filepath}': Preparing final batch (Size: {len(current_chunk)} docs).")
        yield from current_chunk


def ingest_data_from_file_to_es(es_client, filepath, index_name, id_field_in_doc, batch_size=BULK_BATCH_SIZE,
                                timeout=REQUEST_TIMEOUT):
    """Ingests data from a JSONL file into Elasticsearch using the bulk API."""
    initial_timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    final_timestamp = initial_timestamp  # **FIXED: Initialize here**

    if not os.path.exists(filepath) or os.path.getsize(filepath) == 0:
        print(
            f"\n[{initial_timestamp}] No data file found or file is empty at '{filepath}'. Skipping ingestion for '{index_name}'.")
        return

    print(f"\n[{initial_timestamp}] Starting ingestion from '{filepath}' into index '{index_name}'...")
    try:
        success, failed = helpers.bulk(
            es_client,
            _read_and_chunk_from_file(filepath, index_name, id_field_in_doc, batch_size),
            # **FIXED: Pass index_name here**
            chunk_size=batch_size,
            request_timeout=timeout,
            raise_on_error=False
        )
        final_timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')  # Re-assign with actual completion time
        print(f"[{final_timestamp}] Finished ingestion. Successfully ingested {success} documents into '{index_name}'.")
        if failed:
            print(
                f"[{final_timestamp}] WARNING: Failed to ingest {len(failed)} documents into '{index_name}'. Sample errors:")
            for item in failed[:5]:
                print(f"  - {item}")
    except Exception as e:
        print(
            f"[{final_timestamp}] ERROR: An exception occurred during bulk ingestion from '{filepath}' to '{index_name}': {e}")


# --- Main Execution ---
if __name__ == "__main__":
    print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] Starting news and report generation/ingestion process...")

    # --- Control Flags ---
    # Set to True to generate new data, False to skip generation and read from existing files
    DO_GENERATE_NEWS = False
    DO_GENERATE_REPORTS = False

    # Set to True to ingest data into Elasticsearch, False to skip ingestion
    DO_INGEST_NEWS = True
    DO_INGEST_REPORTS = True

    # 1. Validate environment variables for credentials
    if not GEMINI_API_KEY and (DO_GENERATE_NEWS or DO_GENERATE_REPORTS):
        print("ERROR: GEMINI_API_KEY environment variable is not set. Cannot generate data. Exiting.")
        sys.exit(1)

    if (not ES_ENDPOINT_URL or not ES_API_KEY) and (DO_INGEST_NEWS or DO_INGEST_REPORTS):
        print("ERROR: ES_ENDPOINT_URL or ES_API_KEY environment variables are not set. Cannot ingest data. Exiting.")
        sys.exit(1)

    # Configure Gemini API only if generation is enabled
    if DO_GENERATE_NEWS or DO_GENERATE_REPORTS:
        try:
            gemini_model = configure_gemini()
            print("Gemini API configured successfully.")
        except Exception as e:
            print(f"ERROR: Gemini API configuration failed: {e}. Exiting.")
            sys.exit(1)

    # 2. Generate News (if enabled)
    if DO_GENERATE_NEWS:
        print(f"--- Generating News Articles ({datetime.now().strftime('%H:%M:%S')}) ---")
        # Clear existing file before new generation to avoid appending to old data
        if os.path.exists(GENERATED_NEWS_FILE):
            os.remove(GENERATED_NEWS_FILE)
            print(f"Cleared existing '{GENERATED_NEWS_FILE}'.")

        num_specific_assets_for_news = 50
        total_news_generated = generate_news_articles(
            num_specific=num_specific_assets_for_news,
            num_general=NUM_GENERAL_NEWS_ARTICLES,
            output_filepath=GENERATED_NEWS_FILE
        )
        print(f"Total generated news articles saved to file: {total_news_generated}")
    else:
        print("Skipping news generation as DO_GENERATE_NEWS is False.")

    # 3. Generate Reports (if enabled)
    if DO_GENERATE_REPORTS:
        print(f"--- Generating Reports ({datetime.now().strftime('%H:%M:%S')}) ---")
        # Clear existing file before new generation
        if os.path.exists(GENERATED_REPORTS_FILE):
            os.remove(GENERATED_REPORTS_FILE)
            print(f"Cleared existing '{GENERATED_REPORTS_FILE}'.")

        num_specific_assets_for_reports = 20
        total_reports_generated = generate_reports(
            num_specific=num_specific_assets_for_reports,
            num_thematic=NUM_THEMATIC_REPORTS,
            output_filepath=GENERATED_REPORTS_FILE
        )
        print(f"Total generated reports saved to file: {total_reports_generated}")
    else:
        print("Skipping report generation as DO_GENERATE_REPORTS is False.")

    print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] Data generation phase complete.")

    # 4. Initialize Elasticsearch client (only if any ingestion is enabled)
    es_client = None
    if DO_INGEST_NEWS or DO_INGEST_REPORTS:
        print("\nInitializing Elasticsearch client for ingestion...")
        try:
            es_client = Elasticsearch(
                ES_ENDPOINT_URL,
                api_key=ES_API_KEY,
                request_timeout=REQUEST_TIMEOUT,
                verify_certs=False
            )
            if not es_client.info():
                raise ValueError("Connection to Elasticsearch failed!")
            print("Elasticsearch client initialized successfully.")
        except Exception as e:
            print(f"ERROR: Could not connect to Elasticsearch. Please check your Endpoint URL and API Key. Error: {e}")
            sys.exit(1)

    # 5. Ingest Data into Elasticsearch (if enabled)
    if DO_INGEST_NEWS:
        print(f"--- Ingesting News Articles ({datetime.now().strftime('%H:%M:%S')}) ---")
        ingest_data_from_file_to_es(es_client, GENERATED_NEWS_FILE, NEWS_INDEX, "article_id")
    else:
        print("Skipping news ingestion as DO_INGEST_NEWS is False.")

    if DO_INGEST_REPORTS:
        print(f"--- Ingesting Reports ({datetime.now().strftime('%H:%M:%S')}) ---")
        ingest_data_from_file_to_es(es_client, GENERATED_REPORTS_FILE, REPORTS_INDEX, "report_id")
    else:
        print("Skipping report ingestion as DO_INGEST_REPORTS is False.")

    print(f"\n[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] All processes completed.")